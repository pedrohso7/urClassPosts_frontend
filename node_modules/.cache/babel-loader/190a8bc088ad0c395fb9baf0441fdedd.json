{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/CreateUserForm/index.js\",\n    _s = $RefreshSig$();\n\n/*import React, {useState} from 'react';\nimport { Container, Row, Card, Form, Button } from 'react-bootstrap';\n\nconst CreateUserForm = () => {\n  return (\n    \n    <Container>\n      {formState.loading && <LoadingSpinner />}\n      <Card>\n        <Card.Header className=\"bg-dark text-white\" border=\"warning\" as=\"h4\">Cadastro</Card.Header>\n        <Card.Body>\n          <Form>\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Nome</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Nome Sobrenome\" />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" placeholder=\"Insira seu email\" />\n              <Form.Text className=\"text-muted\">\n                Nós não iremos compartilhar seu email para ninguém.\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Senha</Form.Label>\n              <Form.Control type=\"password\" placeholder=\"Senha\" />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Confirmar Senha</Form.Label>\n              <Form.Control type=\"password\" placeholder=\"Senha\" />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Cadastrar\n            </Button>\n\n          </Form>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n}\n\nexport default CreateUserForm;\n*/\nimport React, { useState, useEffect } from 'react';\nimport { useRouteMatch, Redirect } from \"react-router-dom\";\nimport { Container, Row, Card, Form, Button, Image, Spinner, Alert } from 'react-bootstrap';\nimport validate from 'validate.js';\nimport firebase from 'firebase';\nimport Feedback from '../../Components/Feedback/index.js'; //Variáveis do formulário\n\nconst initialFormState = {\n  isValid: false,\n  loading: false,\n  values: {\n    name: '',\n    email: '',\n    password: '',\n    passwordConfirmation: ''\n  },\n  errors: {\n    name: [],\n    email: [],\n    password: [],\n    passwordConfirmation: []\n  },\n  touched: {\n    name: false,\n    email: false,\n    password: false,\n    passwordConfirmation: false\n  }\n}; //Estado inicial do feedback do usuário\n\nconst initialFeedback = {\n  open: false,\n  message: '',\n  type: ''\n}; //Esquema para validações no validate.js\n\nconst schema = {\n  name: {\n    presence: {\n      allowEmpty: false,\n      message: () => 'Este campo é obrigatório'\n    },\n    length: {\n      maximum: 150,\n      message: () => 'Este campo deve ter no máximo 150 caracteres'\n    }\n  },\n  email: {\n    presence: {\n      allowEmpty: false,\n      message: () => 'Este campo é obrigatório'\n    }\n  },\n  password: {\n    presence: {\n      allowEmpty: false,\n      message: () => 'Este campo é obrigatório'\n    },\n    length: {\n      minimum: 8,\n      message: () => 'Este campo deve ter no mínimo 8 caracteres'\n    }\n  },\n  passwordConfirmation: {\n    presence: {\n      allowEmpty: false,\n      message: () => 'Este campo é obrigatório'\n    },\n    length: {\n      minimum: 8,\n      message: () => 'Este campo deve ter no mínimo 8 caracteres'\n    },\n    equality: {\n      attribute: 'password',\n      message: 'As senhas não são iguais!',\n      comparator: (v1, v2) => v1 === v2\n    }\n  }\n};\n\nconst CreateUserForm = () => {\n  _s();\n\n  const [feedback, setFeedback] = useState(initialFeedback);\n  const [formState, setFormState] = useState(initialFormState);\n  useEffect(() => {\n    //Verificando campos do formulário a cada atualização do formulário\n    const errors = validate(formState.values, schema, {\n      fullMessages: false\n    });\n    setFormState(formState => ({ ...formState,\n      isValid: errors ? false : true,\n      errors: errors ? errors : {}\n    }));\n  }, [formState.values]);\n\n  const handleFieldChange = (e, field, value) => {\n    e.persist && e.persist();\n    setFormState({ ...formState,\n      values: { ...formState.values,\n        [field]: value\n      },\n      touched: { ...formState.touched,\n        [field]: true\n      }\n    });\n  };\n\n  const handleRedirect = () => {\n    if (formState.isValid) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 14\n      }, this);\n    } else setFeedback({ ...feedback,\n      open: false\n    });\n  };\n\n  const hasError = field => Boolean(formState.errors[field] && formState.touched[field]);\n\n  const handleSubmit = e => {\n    if (formState.isValid) {\n      //Submetendo dados ao banco\n      let usuarios = firebase.database().ref('usuarios');\n      let chave = usuarios.push().key;\n      usuarios.child(chave).set(formState.values); //firebase.database().ref('Users').child(`${id}`).set(formState.values);\n\n      setFeedback({\n        open: true,\n        type: 'success',\n        message: \"Cadastrado com sucesso!\"\n      });\n    } else {\n      setFeedback({\n        open: true,\n        type: 'danger',\n        message: \"Não foi possível concluir o cadastro.\"\n      });\n    }\n\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      padding: 10\n    },\n    children: formState.loading ? /*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        marginTop: 250\n      },\n      className: \"justify-content-center\",\n      float: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"warning\",\n        size: \"xs\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 10\n    }, this) : /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        className: \"bg-dark text-white\",\n        border: \"warning\",\n        as: \"h4\",\n        children: \"Criar usu\\xE1rio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          as: \"h4\",\n          children: \"Criar conta no sistema\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formBasicName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Nome\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              isInvalid: hasError('name') ? true : false,\n              type: \"text\",\n              placeholder: \"Nome Sobrenome\",\n              value: formState.values.name,\n              onChange: e => handleFieldChange(e, 'name', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-danger\",\n              children: hasError('name') ? formState.errors.name[0] : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formBasicPassword\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Senha Atual\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              isInvalid: hasError('password') ? true : false,\n              type: \"password\",\n              placeholder: \"Senha\",\n              value: formState.values.password,\n              onChange: e => handleFieldChange(e, 'password', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-danger\",\n              children: hasError('password') ? formState.errors.password[0] : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formBasicPasswordConfirmation\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Nova Senha\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              isInvalid: hasError('passwordConfirmation') ? true : false,\n              type: \"password\",\n              placeholder: \"Confirme sua senha\",\n              value: formState.values.passwordConfirmation,\n              onChange: e => handleFieldChange(e, 'passwordConfirmation', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n              className: \"text-danger\",\n              children: hasError('passwordConfirmation') ? formState.errors.passwordConfirmation[0] : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this), feedback.open ? /*#__PURE__*/_jsxDEV(Alert, {\n            variant: feedback.type,\n            onClose: () => handleRedirect(),\n            dismissible: true,\n            children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n              children: feedback.type == 'success' ? 'Sucesso!' : 'Erro!'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: feedback.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            onClick: e => handleSubmit(e),\n            variant: \"primary\",\n            children: \"Cadastrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateUserForm, \"+Qjs1R3g/8px5C7VNKBXRkSChP4=\");\n\n_c = CreateUserForm;\nexport default CreateUserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateUserForm\");","map":{"version":3,"sources":["/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/CreateUserForm/index.js"],"names":["React","useState","useEffect","useRouteMatch","Redirect","Container","Row","Card","Form","Button","Image","Spinner","Alert","validate","firebase","Feedback","initialFormState","isValid","loading","values","name","email","password","passwordConfirmation","errors","touched","initialFeedback","open","message","type","schema","presence","allowEmpty","length","maximum","minimum","equality","attribute","comparator","v1","v2","CreateUserForm","feedback","setFeedback","formState","setFormState","fullMessages","handleFieldChange","e","field","value","persist","handleRedirect","hasError","Boolean","handleSubmit","usuarios","database","ref","chave","push","key","child","set","preventDefault","padding","marginTop","target"],"mappings":"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","sourcesContent":["/*import React, {useState} from 'react';\nimport { Container, Row, Card, Form, Button } from 'react-bootstrap';\n\nconst CreateUserForm = () => {\n  return (\n    \n    <Container>\n      {formState.loading && <LoadingSpinner />}\n      <Card>\n        <Card.Header className=\"bg-dark text-white\" border=\"warning\" as=\"h4\">Cadastro</Card.Header>\n        <Card.Body>\n          <Form>\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Nome</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Nome Sobrenome\" />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control type=\"email\" placeholder=\"Insira seu email\" />\n              <Form.Text className=\"text-muted\">\n                Nós não iremos compartilhar seu email para ninguém.\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Senha</Form.Label>\n              <Form.Control type=\"password\" placeholder=\"Senha\" />\n            </Form.Group>\n\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label>Confirmar Senha</Form.Label>\n              <Form.Control type=\"password\" placeholder=\"Senha\" />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Cadastrar\n            </Button>\n\n          </Form>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n}\n\nexport default CreateUserForm;\n*/\nimport React, {useState, useEffect} from 'react';\nimport { useRouteMatch , Redirect} from \"react-router-dom\";\nimport { Container, Row, Card, Form, Button, Image, Spinner, Alert} from 'react-bootstrap';\nimport validate from 'validate.js';\nimport firebase from 'firebase';\n\nimport Feedback from '../../Components/Feedback/index.js'\n\n\n//Variáveis do formulário\nconst initialFormState = {\n  isValid: false,\n  loading: false,\n  values: {\n    name: '',\n    email: '',\n    password: '',\n    passwordConfirmation: ''\n  },\n  errors: {\n    name: [],\n    email: [],\n    password: [],\n    passwordConfirmation: []\n  },\n  touched: {\n    name: false,\n    email: false,\n    password: false,\n    passwordConfirmation: false\n  }\n};\n\n//Estado inicial do feedback do usuário\nconst initialFeedback = {\n  open: false,\n  message: '',\n  type: '' \n};\n\n//Esquema para validações no validate.js\nconst schema = {\n  name: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n    length: { maximum: 150, message: () => 'Este campo deve ter no máximo 150 caracteres' }\n  },\n  email: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n  },\n  password: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n    length: { minimum: 8, message: () => 'Este campo deve ter no mínimo 8 caracteres' }\n  },\n  passwordConfirmation: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n    length: { minimum: 8, message: () => 'Este campo deve ter no mínimo 8 caracteres' },\n    equality: { attribute: 'password', message: 'As senhas não são iguais!', comparator: (v1, v2) => (v1 === v2) }\n  } \n};\n\n\n\nconst CreateUserForm = () => {\n  const [feedback, setFeedback] = useState(initialFeedback);\n  const [formState, setFormState] = useState(initialFormState);\n\n  useEffect(() => {\n    //Verificando campos do formulário a cada atualização do formulário\n    const errors = validate(formState.values, schema, { fullMessages: false });\n\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false: true,\n      errors: errors ? errors : {}\n    })) \n    \n  }, [formState.values]);\n  \n  const handleFieldChange = (e, field, value) => {\n    e.persist && e.persist();\n    setFormState({\n      ...formState,\n      values: {\n        ...formState.values,\n        [field]: value\n      },\n      touched: {\n        ...formState.touched,\n        [field]: true\n      }\n    });    \n  };\n\n  const handleRedirect = () => {\n    if(formState.isValid){\n      return <Redirect to=\"/\"/>\n    } else setFeedback({...feedback, open: false});\n  }\n\n  const hasError = (field) => Boolean(formState.errors[field] && formState.touched[field]);\n\n  const handleSubmit = (e) => {\n    if(formState.isValid){\n      //Submetendo dados ao banco\n      let usuarios = firebase.database().ref('usuarios');\n      let chave = usuarios.push().key;\n      usuarios.child(chave).set(formState.values)\n      //firebase.database().ref('Users').child(`${id}`).set(formState.values);\n      setFeedback({\n        open: true,\n        type: 'success',\n        message: \"Cadastrado com sucesso!\"\n      })\n    }else{\n      setFeedback({\n        open: true,\n        type: 'danger',\n        message: \"Não foi possível concluir o cadastro.\"\n      })\n    }    \n    e.preventDefault();\n  };\n\n  return (    \n    <Container style={{padding:10}}>\n      {\n        formState.loading ? \n        (<Row style={{marginTop:250}} className=\"justify-content-center\" float=\"center\">\n              <Spinner  animation=\"border\" variant=\"warning\" size=\"xs\" role=\"status\"/>\n          </Row>) : \n        (<Card>\n          <Card.Header  className=\"bg-dark text-white\" border=\"warning\" as=\"h4\">Criar usuário</Card.Header>\n          \n          <Card.Body>\n            <Card.Title as=\"h4\">Criar conta no sistema</Card.Title>\n            <br/>\n            <Form noValidate>\n\n              <Form.Group controlId=\"formBasicName\">\n                <Form.Label>Nome</Form.Label>\n                <Form.Control \n                  isInvalid={hasError('name') ? true : false}\n                  type=\"text\" \n                  placeholder=\"Nome Sobrenome\"             \n                  value={formState.values.name}\n                  onChange={e => handleFieldChange(e, 'name', e.target.value)}\n              />\n                {/* Mensagem de erro, caso exista */}\n                <Form.Text className=\"text-danger\">\n                  {hasError('name') ? formState.errors.name[0] : null}\n                </Form.Text>\n                \n              </Form.Group>\n  \n\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Senha Atual</Form.Label>\n                <Form.Control \n                  isInvalid={hasError('password') ? true : false}\n                  type=\"password\" \n                  placeholder=\"Senha\" \n                  value={formState.values.password}\n                  onChange={e => handleFieldChange(e, 'password', e.target.value)}\n                />\n                {/* Mensagem de erro, caso exista */}\n                <Form.Text className=\"text-danger\">\n                  {hasError('password') ? formState.errors.password[0] : null}\n                </Form.Text>\n                \n              </Form.Group>\n  \n  \n              <Form.Group controlId=\"formBasicPasswordConfirmation\">\n                <Form.Label>Nova Senha</Form.Label>\n                <Form.Control \n                  isInvalid={hasError('passwordConfirmation') ? true : false}\n                  type=\"password\" \n                  placeholder=\"Confirme sua senha\" \n                  value={formState.values.passwordConfirmation}\n                  onChange={e => handleFieldChange(e, 'passwordConfirmation', e.target.value)}\n                />\n                {/* Mensagem de erro, caso exista */}       \n                <Form.Text className=\"text-danger\">\n                  {hasError('passwordConfirmation') ? formState.errors.passwordConfirmation[0] : null}\n                </Form.Text>\n\n              </Form.Group>\n\n              {/* Botao Submit e feedback para o usuário utilizando o controleador \"feedback.open\"*/}\n              {feedback.open ? (\n                <Alert variant={feedback.type} onClose={() => handleRedirect()} dismissible>\n                  <Alert.Heading>{(feedback.type == 'success') ? ('Sucesso!') : ('Erro!')}</Alert.Heading>\n                  <p>{feedback.message}</p>\n\n                </Alert>\n              ) :\n                <Button type=\"submit\" onClick={(e) => handleSubmit(e)} variant=\"primary\">Cadastrar</Button>\n              }\n            </Form>\n          </Card.Body>\n        </Card>)\n      }      \n    </Container>\n  );\n}\n\nexport default CreateUserForm;\n"]},"metadata":{},"sourceType":"module"}