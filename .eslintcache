[{"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/index.js":"1","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/App.js":"2","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/routes.js":"3","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/Error/index.js":"4","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/Home/index.js":"5","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/Login/index.js":"6","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/Header/index.js":"7","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/CreateUserForm/index.js":"8","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/EditUserForm/index.js":"9","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/firebaseConnection.js":"10"},{"size":483,"mtime":1607390441568,"results":"11","hashOfConfig":"12"},{"size":266,"mtime":1607636834132,"results":"13","hashOfConfig":"12"},{"size":1328,"mtime":1607692913383,"results":"14","hashOfConfig":"12"},{"size":294,"mtime":1607390441600,"results":"15","hashOfConfig":"12"},{"size":645,"mtime":1607697556939,"results":"16","hashOfConfig":"12"},{"size":5990,"mtime":1607698792561,"results":"17","hashOfConfig":"12"},{"size":2373,"mtime":1607698808677,"results":"18","hashOfConfig":"12"},{"size":8455,"mtime":1607660499528,"results":"19","hashOfConfig":"12"},{"size":8033,"mtime":1607674792213,"results":"20","hashOfConfig":"12"},{"size":569,"mtime":1607636368747,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1kiazx3",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/index.js",[],["46","47"],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/App.js",["48"],"import React from 'react';\nimport Routes from './routes'\nimport firebase from './firebaseConnection';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './global.css'\n\n\nfunction App() {\n  return (\n    <div>\n      <Routes/>\n    </div>\n  );\n}\n\nexport default App;\n","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/routes.js",["49"],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/Error/index.js",[],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/Home/index.js",["50","51","52"],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/Login/index.js",["53","54","55","56","57"],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/Header/index.js",[],"/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/CreateUserForm/index.js",["58","59"],"\nimport React, {useState, useEffect} from 'react';\nimport { Redirect} from \"react-router-dom\";\nimport { Container, Row, Card, Form, Button, Image, Spinner, Alert} from 'react-bootstrap';\nimport validate from 'validate.js';\nimport firebase from '../../firebaseConnection';\n\n\n//Variáveis do formulário\nconst initialFormState = {\n  isValid: false,\n  loading: false,\n  values: {\n    name: '',\n    email: '',\n    password: '',\n    passwordConfirmation: ''\n  },\n  errors: {\n    name: [],\n    email: [],\n    password: [],\n    passwordConfirmation: []\n  },\n  touched: {\n    name: false,\n    email: false,\n    password: false,\n    passwordConfirmation: false\n  }\n};\n\n//Estado inicial do feedback do usuário\nconst initialFeedback = {\n  open: false,\n  message: '',\n  type: '' \n};\n\n//Esquema para validações no validate.js\nconst schema = {\n  name: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n    length: { maximum: 150, message: () => 'Este campo deve ter no máximo 150 caracteres' }\n  },\n  email: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n    email: { message: () => 'Insira um email válido' }\n  },\n  password: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n    length: { minimum: 8, message: () => 'Este campo deve ter no mínimo 8 caracteres' }\n  },\n  passwordConfirmation: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n    length: { minimum: 8, message: () => 'Este campo deve ter no mínimo 8 caracteres' },\n    equality: { attribute: 'password', message: 'As senhas não são iguais!', comparator: (v1, v2) => (v1 === v2) }\n  } \n};\n\n\n\nconst CreateUserForm = () => {\n  //Garantindo que a página apenas seja por alguém deslogado do sistema\n  firebase.auth().signOut();\n\n  //Observador\n  firebase.auth().onAuthStateChanged((user) => {\n    if(user){\n      firebase.database().ref('User').child(user.uid).set({\n        name: formState.values.name,\n      })\n    }\n  });\n\n  const [feedback, setFeedback] = useState(initialFeedback);\n  const [formState, setFormState] = useState(initialFormState);\n\n  useEffect(() => {\n    //Verificando campos do formulário a cada atualização do formulário\n    const errors = validate(formState.values, schema, { fullMessages: false });\n\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false: true,\n      errors: errors ? errors : {}\n    })) \n    \n  }, [formState.values]);\n  \n  const handleFieldChange = (e, field, value) => {\n    e.persist && e.persist();\n    setFormState({\n      ...formState,\n      values: {\n        ...formState.values,\n        [field]: value\n      },\n      touched: {\n        ...formState.touched,\n        [field]: true\n      }\n    });    \n  };\n\n  const handleRedirect = () => {\n    if(formState.isValid){\n      return <Redirect to=\"/\"/>\n    }\n    setFeedback({...feedback, open: false});\n  }\n\n  const hasError = (field) => Boolean(formState.errors[field] && formState.touched[field]);\n\n  const handleSubmit = (e) => {\n    if(formState.isValid){\n      //Submetendo dados ao banco\n      firebase.auth().createUserWithEmailAndPassword(formState.values.email, formState.values.password)\n      .catch((error) =>{\n        if(error.code === 'auth/email-already-in-use'){\n          setFeedback({\n            open: true,\n            type: 'danger',\n            message: \"Email em uso!\"\n          })\n        }else if(error.code === 'auth/invalid-email'){\n          setFeedback({\n            open: true,\n            type: 'danger',\n            message: \"Email inválido!\"\n          })          \n        }else{\n          setFeedback({\n            open: true,\n            type: 'danger',\n            message: 'Erro: ' + error.code\n          })\n        }\n        e.preventDefault();\n      })\n      \n      /*let users = firebase.database().ref('Users');\n      let key = users.push().key;\n      users.child(key).set({\n        name: formState.values.name,\n        email: formState.values.email,\n        senha: formState.values.password\n      });*/\n      \n      setFeedback({\n        open: true,\n        type: 'success',\n        message: \"Cadastrado com sucesso!\"\n      })\n    }else{\n      setFeedback({\n        open: true,\n        type: 'danger',\n        message: \"Não foi possível concluir o cadastro.\"\n      })\n    }    \n    e.preventDefault();\n  };\n\n  return (    \n    <Container style={{padding:10}}>\n      {\n        formState.loading ? \n        (<Row style={{marginTop:250}} className=\"justify-content-center\" float=\"center\">\n              <Spinner  animation=\"border\" variant=\"warning\" size=\"xs\" role=\"status\"/>\n          </Row>) : \n        (<Card>\n          <Card.Header  className=\"bg-dark text-white\" border=\"warning\" as=\"h4\">Criar usuário</Card.Header>\n          \n          <Card.Body>\n            <Card.Title as=\"h4\">Criar conta no sistema</Card.Title>\n            <br/>\n            <Form noValidate>\n\n              <Form.Group controlId=\"formBasicName\">\n                <Form.Label>Nome</Form.Label>\n                <Form.Control \n                  isInvalid={hasError('name') ? true : false}\n                  type=\"text\" \n                  placeholder=\"Nome Sobrenome\"             \n                  value={formState.values.name}\n                  onChange={e => handleFieldChange(e, 'name', e.target.value)}\n              />\n                {/* Mensagem de erro, caso exista */}\n                <Form.Text className=\"text-danger\">\n                  {hasError('name') ? formState.errors.name[0] : null}\n                </Form.Text>\n                \n              </Form.Group>\n  \n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Email</Form.Label>\n                <Form.Control \n                  isInvalid={hasError('email') ? true : false}\n                  type=\"email\" \n                  placeholder=\"texto@exemplo.com\" \n                  value={formState.values.email}\n                  onChange={e => handleFieldChange(e, 'email', e.target.value)}\n                />\n                {/* Mensagem de erro, caso exista */}\n                <Form.Text className=\"text-danger\">\n                  {hasError('email') ? formState.errors.email[0] : null}\n                </Form.Text>\n                \n              </Form.Group>\n\n\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Senha</Form.Label>\n                <Form.Control \n                  isInvalid={hasError('password') ? true : false}\n                  type=\"password\" \n                  placeholder=\"Senha\" \n                  value={formState.values.password}\n                  onChange={e => handleFieldChange(e, 'password', e.target.value)}\n                />\n                {/* Mensagem de erro, caso exista */}\n                <Form.Text className=\"text-danger\">\n                  {hasError('password') ? formState.errors.password[0] : null}\n                </Form.Text>\n                \n              </Form.Group>\n  \n  \n              <Form.Group controlId=\"formBasicPasswordConfirmation\">\n                <Form.Label>Confirme a Senha</Form.Label>\n                <Form.Control \n                  isInvalid={hasError('passwordConfirmation') ? true : false}\n                  type=\"password\" \n                  placeholder=\"Confirme sua senha\" \n                  value={formState.values.passwordConfirmation}\n                  onChange={e => handleFieldChange(e, 'passwordConfirmation', e.target.value)}\n                />\n                {/* Mensagem de erro, caso exista */}       \n                <Form.Text className=\"text-danger\">\n                  {hasError('passwordConfirmation') ? formState.errors.passwordConfirmation[0] : null}\n                </Form.Text>\n\n              </Form.Group>\n\n              {/* Botao Submit e feedback para o usuário utilizando o controleador \"feedback.open\"*/}\n              {feedback.open ? (\n                <Alert variant={feedback.type} onClose={() => handleRedirect()} dismissible>\n                  <Alert.Heading>{(feedback.type == 'success') ? ('Sucesso!') : ('Erro!')}</Alert.Heading>\n                  <p>{feedback.message}</p>\n\n                </Alert>\n              ) :\n                <Button type=\"submit\" onClick={(e) => handleSubmit(e)} variant=\"primary\">Cadastrar</Button>\n              }\n            </Form>\n          </Card.Body>\n        </Card>)\n      }      \n    </Container>\n  );\n}\n\nexport default CreateUserForm;\n","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/views/EditUserForm/index.js",["60"],"import React, {useState, useEffect} from 'react';\nimport { useRouteMatch , Link } from \"react-router-dom\";\nimport { Container, Row, Card, Form, Button, Image, Spinner, Alert} from 'react-bootstrap';\nimport validate from 'validate.js';\nimport firebase from '../../firebaseConnection';\n\n\n//Variáveis do formulário\nconst initialFormState = {\n  isValid: false,\n  loading: true,\n  values: {\n    name: '',\n    email: '',\n    password: '',\n    bio: '',\n    avatar: ''\n  },\n  errors: {\n    name: [],\n    email: [],\n    password: [],\n    bio: [],\n    avatar: []\n  },\n  touched: {\n    name: false,\n    email: false,\n    password: false,\n    bio: false,\n    avatar: false\n  }\n};\n\n//Estado inicial do feedback do usuário\nconst initialFeedback = {\n  open: false,\n  message: '',\n  type: '' \n};\n\n//Esquema para validações no validate.js\nconst schema = {\n  name: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n    length: { maximum: 150, message: () => 'Este campo deve ter no máximo 150 caracteres' }\n  },\n  email: {\n    presence: { allowEmpty: false, message: () => 'Este campo é obrigatório' },\n    email: { message: () => 'Insira um email válido' }\n  },\n  bio: {\n    length: { maximum: 700, message: () => 'Este campo deve ter no máximo 700 caracteres' }\n  }      \n};\n\n\n\nconst EditUserForm = () => {\n  const routerMatch = useRouteMatch(\"/user/edit/:id\");\n  const id = routerMatch.params.id;\n  const [fileName, setFileName] = useState(\"Insira um arquivo válido\");\n  const [feedback, setFeedback] = useState(initialFeedback);\n  const [formState, setFormState] = useState(initialFormState);\n\n\n\n  //console.log(formState.values);\n\n  const queryUserByID = () => {\n    //Consultando usuário com ID passado na URL\n    if(formState.loading) {\n      firebase.database().ref('User').child(`${id}`).once('value', (snapshot) => {\n        setFormState(formState => ({\n          ...formState,\n          loading: false,\n          values: {\n            ...formState.values,\n            name: snapshot.val().name,\n            email: firebase.auth().currentUser.email,\n            bio: snapshot.val().bio ? snapshot.val().bio : '',\n            password: firebase.auth().currentUser.password,\n            avatar: snapshot.val().avatar ? snapshot.val().avatar : '' \n          },\n          touched: {          \n            ...formState.touched,\n            name: true,\n            email: true,\n            password: true,\n            bio: snapshot.val().bio ? true : false,\n            avatar: snapshot.val().avatar ? true : false          \n          }\n        }));\n      })\n    } \n  }\n\n  useEffect(() => {\n    //Buscando usuário\n    queryUserByID();\n    console.log(formState.values);\n  });  \n\n  useEffect(() => {\n    //Verificando campos do formulário a cada atualização do formulário\n    const errors = validate(formState.values, schema, { fullMessages: false });\n\n    setFormState(formState => ({\n      ...formState,\n      isValid: errors ? false: true,\n      errors: errors ? errors : {}\n    })) \n    \n  }, [formState.values]);\n  \n  const handleFieldChange = (e, field, value) => {\n    e.persist && e.persist();\n    setFormState({\n      ...formState,\n      values: {\n        ...formState.values,\n        [field]: value\n      },\n      touched: {\n        ...formState.touched,\n        [field]: true\n      }\n    });    \n  };\n\n  const handleAvatarChange = (e) => {\n    setFileName(e.target.files[0].name);\n    handleFieldChange(e, 'avatar', e.target.value);\n  }\n\n  const hasError = (field) => Boolean(formState.errors[field] && formState.touched[field]);\n\n  const handleSubmit = (e) => {\n    if(formState.isValid){\n      // Atualizando campos no banco\n      firebase.database().ref('User').child(`${id}`).set({\n        name: formState.values.name,\n        bio: formState.touched.bio  ?  formState.values.bio : null,\n        avatar: formState.touched.avatar  ?  formState.values.avatar : null,\n      });\n      setFeedback({\n        open: true,\n        type: 'success',\n        message: \"Edição realizada com sucesso.\"\n      })\n    }else{\n      setFeedback({\n        open: true,\n        type: 'danger',\n        message: \"Edição não concluída.\"\n      })\n    }    \n    e.preventDefault();\n  };\n\n  return (    \n    <Container style={{padding:10}}>\n      {\n        formState.loading ? \n        (<Row style={{marginTop:250}} className=\"justify-content-center\" float=\"center\">\n              <Spinner  animation=\"border\" variant=\"warning\" size=\"xs\" role=\"status\"/>\n          </Row>) : \n        (<Card>\n          <Card.Header  className=\"bg-dark text-white\" border=\"warning\" as=\"h4\">Editar</Card.Header>\n          \n          <Card.Body>\n            <Card.Title as=\"h4\">Editar perfil</Card.Title>\n            <br/>\n            <Form noValidate>\n              <Form.Group controlId=\"formBasicAvatar\">\n                <Image\n                  width={100}\n                  height={100}\n                  alt=\"171x180\"\n                  src=\"https://elaele.com.br/img/anonimo.png\"\n                  roundedCircle\n                />   \n                <br/><br/>\n                <Form.Label>Avatar Personalizado</Form.Label>\n                  <Form.File \n                    id=\"inputGroupFile01\"\n                    label={fileName}\n                    value={formState.values.avatar}\n                    data-browse=\"Insira uma imagem\"\n                    onChange={(e) => handleAvatarChange(e)}\n                    custom                \n                  />\n                  \n                  <Form.Text className=\"text-muted\">\n                    Formatos válidos: PNG, JPEG, JPG.\n                  </Form.Text>\n\n                  {/* Mensagem de erro, caso exista */}\n                  {/*<p className=\"text-danger\">{hasError('bio') ? formState.errors.bio[0] : null}</p>*/}\n              </Form.Group>   \n  \n              <Form.Group controlId=\"formBasicBio\">\n                <Form.Label>Descrição do seu perfil</Form.Label>\n                <Form.Control \n                  as=\"textarea\"\n                  type=\"text\"\n                  isInvalid={hasError('bio') ? true : false}\n                  placeholder=\"Descrição\" \n                  value={formState.values.bio}\n                  onChange={e => handleFieldChange(e, 'bio', e.target.value)}\n                />                \n                {/* Mensagem de erro, caso exista */}\n                <Form.Text className=\"text-danger\">\n                  {hasError('bio') ? formState.errors.bio[0] : null}\n                </Form.Text>                  \n                \n              </Form.Group>\n              \n              <Form.Group controlId=\"formBasicName\">\n                <Form.Label>Nome</Form.Label>\n                <Form.Control \n                  isInvalid={hasError('name') ? true : false}\n                  type=\"text\" \n                  placeholder=\"Nome Sobrenome\"             \n                  value={formState.values.name}\n                  onChange={e => handleFieldChange(e, 'name', e.target.value)}\n              />\n                {/* Mensagem de erro, caso exista */}\n                <Form.Text className=\"text-danger\">\n                  {hasError('name') ? formState.errors.name[0] : null}\n                </Form.Text>\n                \n              </Form.Group>\n\n              {/* Botao Submit e feedback para o usuário utilizando o controlador \"feedback.open\"*/}\n              {feedback.open ? (\n                <Alert variant={feedback.type} onClose={() => setFeedback({...feedback, open: false})} dismissible>\n                  <Alert.Heading>{(feedback.type == 'success') ? ('Sucesso!') : ('Erro!')}</Alert.Heading>\n                  <p>{feedback.message}</p>\n                  <Link to={'/'}>Retornar a página inicial</Link>\n                </Alert>\n              ) :\n                <Button type=\"submit\" onClick={(e) => handleSubmit(e)} variant=\"primary\">Atualizar</Button>\n              }\n            </Form>\n          </Card.Body>\n        </Card>)\n      }      \n    </Container>\n  );\n}\n\nexport default EditUserForm;\n","/home/pedrohso7/Desktop/Trabalhos/WEB/Sistema/urClassPosts/urclassposts_frontend/src/firebaseConnection.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":3,"column":8,"nodeType":"67","messageId":"68","endLine":3,"endColumn":16},{"ruleId":"65","severity":1,"message":"69","line":11,"column":7,"nodeType":"67","messageId":"68","endLine":11,"endColumn":19},{"ruleId":"65","severity":1,"message":"70","line":2,"column":20,"nodeType":"67","messageId":"68","endLine":2,"endColumn":26},{"ruleId":"65","severity":1,"message":"71","line":2,"column":28,"nodeType":"67","messageId":"68","endLine":2,"endColumn":31},{"ruleId":"65","severity":1,"message":"72","line":2,"column":33,"nodeType":"67","messageId":"68","endLine":2,"endColumn":38},{"ruleId":"65","severity":1,"message":"73","line":2,"column":17,"nodeType":"67","messageId":"68","endLine":2,"endColumn":25},{"ruleId":"65","severity":1,"message":"72","line":3,"column":46,"nodeType":"67","messageId":"68","endLine":3,"endColumn":51},{"ruleId":"65","severity":1,"message":"74","line":52,"column":10,"nodeType":"67","messageId":"68","endLine":52,"endColumn":18},{"ruleId":"75","severity":1,"message":"76","line":186,"column":50,"nodeType":"77","messageId":"78","endLine":186,"endColumn":52},{"ruleId":"75","severity":1,"message":"76","line":188,"column":35,"nodeType":"77","messageId":"78","endLine":188,"endColumn":37},{"ruleId":"65","severity":1,"message":"72","line":4,"column":46,"nodeType":"67","messageId":"68","endLine":4,"endColumn":51},{"ruleId":"75","severity":1,"message":"76","line":249,"column":50,"nodeType":"77","messageId":"78","endLine":249,"endColumn":52},{"ruleId":"75","severity":1,"message":"76","line":238,"column":50,"nodeType":"77","messageId":"78","endLine":238,"endColumn":52},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","'PrivateRoute' is assigned a value but never used.","'Navbar' is defined but never used.","'Nav' is defined but never used.","'Image' is defined but never used.","'Redirect' is defined but never used.","'redirect' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]